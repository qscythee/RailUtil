"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7401],{28001:e=>{e.exports=JSON.parse('{"functions":[{"name":"isState","desc":"Checks if the arg is a Fusion StateObject.","params":[{"name":"arg","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":72,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}},{"name":"isValue","desc":"Checks if the arg is a Fusion Value.","params":[{"name":"arg","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":81,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}},{"name":"removeTask","desc":"Removes a task from a scope by its taskId.\\n\\n\\n```lua\\nlocal id = \\"Greeting\\"\\nlocal task = s:addTask(function() print(\\"Hello, World!\\") end, nil, id)\\n\\ns:removeTask(id) -- Hello, World!\\n```","params":[{"name":"scope","desc":"The scope to remove the task from","lua_type":"Scope<any>"},{"name":"taskId","desc":"The taskId of the task to remove","lua_type":"any"},{"name":"dontCleanup","desc":"Whether or not to run the cleanup function on the task","lua_type":"boolean?"}],"returns":[{"desc":"The task that was removed","lua_type":"Task?"}],"function_type":"static","source":{"line":198,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}},{"name":"addTask","desc":"Adds a task to a scope. If a taskId is provided, it will remove any existing task with that taskId.\\n\\n\\n```lua\\nlocal s = RailUtil.Fusion.scoped()\\n\\nlocal id = \\"Greeting\\"\\nlocal task = s:addTask(function() print(\\"Hello, World!\\") end, nil, id)\\n\\nFusion.doCleanup(s) -- Hello, World!\\n```","params":[{"name":"scope","desc":"The scope to add the task to","lua_type":"Scope<any>"},{"name":"tsk","desc":"The task to add","lua_type":"Task & T"},{"name":"methodName","desc":"The method to call when the task is removed","lua_type":"any?"},{"name":"taskId","desc":"The taskId of the task","lua_type":"any?"}],"returns":[{"desc":"The task that was added","lua_type":"Task"}],"function_type":"static","source":{"line":232,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}},{"name":"getTask","desc":"Gets a task from a scope by its taskId.\\n\\n\\n```lua\\nlocal s = RailUtil.Fusion.scoped()\\n\\nlocal id = \\"Greeting\\"\\nlocal task = s:addTask(function() print(\\"Hello, World!\\") end, nil, id)\\n\\nlocal foundTask = s:getTask(id)\\nfoundTask() -- Hello, World!\\n```","params":[{"name":"scope","desc":"The scope to search for the task","lua_type":"Scope<any>"},{"name":"taskId","desc":"The taskId of the task to find","lua_type":"any"}],"returns":[{"desc":"The task if found, nil otherwise","lua_type":"Task?"}],"function_type":"static","source":{"line":278,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}},{"name":"promiseState","desc":"Creates a promise that resolves when the given state changes. If a predicate is given then the promise will only resolve if the predicate returns true.\\nIf the third argument `canResolveImmediately` is true, the promise will will check the predicate immediately.\\n\\n```lua\\nlocal a = s:Value(10)\\n\\ns:promiseState(a):andThen(function(value)\\n\\tprint(\\"Value is now\\", value)\\nend)\\n\\na:set(20) -- \\"Value is now 20\\"\\na:set(30) -- Promise has already resolved so no print\\n```","params":[{"name":"scope","desc":"","lua_type":"Scope<any>"},{"name":"state","desc":"","lua_type":"State<T>"},{"name":"predicate","desc":"","lua_type":"((value: T) -> boolean)?"},{"name":"canResolveImmediately","desc":"","lua_type":"boolean?"}],"returns":[{"desc":"","lua_type":"Promise\\r\\n"}],"function_type":"static","source":{"line":309,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}},{"name":"bindTo","desc":"Binds a scope to the lifecycle of an instance. When the instance is destroyed, the scope will be cleaned up.\\nAlso applies vice versa; when the scope is cleaned up, the instance will be destroyed.\\n\\n```lua\\nlocal s = RailUtil.Fusion.scoped()\\n\\ns:bindTo(s:New \\"Part\\" {\\n\\tAnchored = true;\\n})\\n```","params":[{"name":"scope","desc":"","lua_type":"Scope<any>"},{"name":"obj","desc":"","lua_type":"Instance"}],"returns":[{"desc":"","lua_type":"Instance\\r\\n"}],"function_type":"static","source":{"line":350,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}},{"name":"ensureIsState","desc":"Ensures a passed data is a StateObject. If it is not, it will be converted to one.","params":[{"name":"scope","desc":"The scope in which to create the new state object","lua_type":"Scope<any>"},{"name":"data","desc":"The potential state object","lua_type":"UsedAs<T>?"},{"name":"defaultValue","desc":"The default value to use if the data is nil","lua_type":"T"},{"name":"datatype","desc":"The type or types of the data expected in the state","lua_type":"(string | { string })?"}],"returns":[{"desc":"The existing or newly created state object","lua_type":"StateObject<T>"}],"function_type":"static","source":{"line":379,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}},{"name":"ensureIsValue","desc":"Ensures a passed data is a Value. If it is not, it will be converted to one.","params":[{"name":"scope","desc":"The scope in which to create the new state object","lua_type":"Scope<any>"},{"name":"data","desc":"The potential state object","lua_type":"UsedAs<T>"},{"name":"defaultValue","desc":"The default value to use if the data is nil","lua_type":"T"},{"name":"datatype","desc":"The type or types of the data expected in the state","lua_type":"(string | { string })?"}],"returns":[{"desc":"The existing or newly created state object","lua_type":"Value<T>"}],"function_type":"static","source":{"line":426,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}},{"name":"formatAssetId","desc":"Takes an AssetId and formats it to a valid string.\\n\\n\\n```lua\\nlocal s = RailUtil.Fusion.scoped()\\n\\nlocal assetId = s:formatAssetId(\\"rbxefsefawsetid://1234567890\\")\\nprint( peek(assetId) ) -- \\"rbxassetid://1234567890\\"\\n```\\n```lua\\nlocal assetId = s:formatAssetId(1234567890)\\nprint( peek(assetId) ) -- \\"rbxassetid://1234567890\\"\\n```","params":[{"name":"scope","desc":"","lua_type":"Scope<any>"},{"name":"id","desc":"The AssetId to ensure","lua_type":"UsedAs<string | number>"},{"name":"default","desc":"The default AssetId to use if the id is nil","lua_type":"(string | number)?"}],"returns":[{"desc":"The State<string> that is synced with the AssetId","lua_type":"CanBeState<string>"}],"function_type":"static","source":{"line":484,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}},{"name":"ratio","desc":"Generates a computed that calculates the ratio of two numbers as a State<number>.\\n\\n\\n```lua\\nlocal s = RailUtil.Fusion.scoped()\\n\\nlocal numerator = s:Value(100)\\nlocal denominator = s:Value(200)\\n\\nlocal ratio = s:ratio(numerator, denominator)\\nprint( peek(ratio) ) -- 0.5\\n```","params":[{"name":"scope","desc":"The scope to create the State in","lua_type":"Scope<any>"},{"name":"numerator","desc":"The numerator of the ratio","lua_type":"UsedAs<number>"},{"name":"denominator","desc":"The denominator of the ratio","lua_type":"UsedAs<number>"},{"name":"mutator","desc":"An optional State to scale by or a function to mutate the ratio","lua_type":"(UsedAs<T> | (ratio: number, use: Use) -> T)?\\r\\n"}],"returns":[{"desc":"The ratio (Potentially mutated)","lua_type":"State<T>"}],"function_type":"static","source":{"line":519,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}},{"name":"ratioUDim2","desc":"Wraps FusionUtil.ratio with a handler for UDim2s\\n\\n\\n```lua\\nlocal numerator = s:Value(100)\\nlocal denominator = s:Value(200)\\nlocal size = s:Value(UDim2.new(0.2, 100, 0.2, 100))\\nlocal sizeAdjusted = s:ratioUDim2(numerator, denominator, size)\\nprint( peek(sizeAdjusted) ) -- UDim2.new(0.1, 50, 0.1, 50)\\n```","params":[{"name":"scope","desc":"","lua_type":"Scope<any>"},{"name":"numerator","desc":"The numerator of the ratio","lua_type":"UsedAs<number>"},{"name":"denominator","desc":"The denominator of the ratio","lua_type":"UsedAs<number>"},{"name":"v","desc":"The UDim2 to scale","lua_type":"UsedAs<UDim2>\\r\\n"}],"returns":[{"desc":"The scaled UDim2","lua_type":"State<UDim2>"}],"function_type":"static","source":{"line":560,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}},{"name":"screenRatio","desc":"This wraps FusionUtil.ratio with a handler for scaling states/functions with the Screen Height.\\n\\n\\n```lua\\nlocal paddingOffset = s:Value(10)\\n\\nlocal paddingAdjusted = s:screenRatio(paddingOffset)\\n```\\n```lua\\nlocal size = Value(UDim2.new(0, 100, 0, 100))\\n\\nlocal sizeAdjusted = s:screenRatio(size, FusionUtil.ratioUDim2)\\n```\\n```lua\\nlocal x = s:Value(10)\\nlocal y = s:Value(20)\\nlocal z = s:screenRatio(function(ratio, use)\\n\\treturn (use(x) + use(y)) * ratio\\nend)\\n```","params":[{"name":"scope","desc":"","lua_type":"Scope<any>"},{"name":"mutator","desc":"An optional State to scale by or a function to mutate the ratio","lua_type":"(UsedAs<T> | (ratio: number, use: Use) -> T)?"},{"name":"ratioFn","desc":"An optional function to use for the ratio, defaults to FusionUtil.ratio, but could be given something like FusionUtil.ratioUDim2","lua_type":"any"}],"returns":[],"function_type":"static","realm":["Client"],"source":{"line":599,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}},{"name":"lerpNumber","desc":"Lerps between two number states. If no use function is given then it returns a state\\n\\n\\n```lua\\nlocal a = Value(10)\\nlocal b = Value(20)\\nlocal alpha = Value(0.5)\\nlocal z = FusionUtil.lerpNumber(a, b, alpha)\\nprint( peek(z) ) -- 15\\n```","params":[{"name":"scope","desc":"","lua_type":"Scope<any>"},{"name":"n1","desc":"The first number state","lua_type":"UsedAs<number>"},{"name":"n2","desc":"The second number state","lua_type":"UsedAs<number>"},{"name":"alpha","desc":"The alpha state","lua_type":"UsedAs<number>"},{"name":"_use","desc":"An optional function to use to get the values of the states","lua_type":"((any) -> (any))?"}],"returns":[{"desc":"The resultant lerped number state/value","lua_type":"UsedAs<number>"}],"function_type":"static","source":{"line":625,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}},{"name":"eq","desc":"A simple equality function that returns true if the two states are equal.\\n\\n\\n```lua\\nlocal s = RailUtil.Fusion.scoped()\\n\\nlocal a = s:Value(10)\\nlocal b = s:Value(10)\\nlocal c = s:eq(a, b)\\nprint( peek(c) ) -- true\\na:set(20)\\nprint( peek(c) ) -- false\\n```","params":[{"name":"scope","desc":"","lua_type":"Scope<any>"},{"name":"stateToCheck1","desc":"The first potential state to check","lua_type":"UsedAs<any>"},{"name":"stateToCheck2","desc":"The second potential state to check","lua_type":"UsedAs<any>"}],"returns":[{"desc":"A state resolving to the equality of the two given arguments","lua_type":"State<boolean>"}],"function_type":"static","source":{"line":656,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}},{"name":"observeState","desc":"Calls the provided callback immediately with the initial state and then again anytime the state updates.","params":[{"name":"scope","desc":"","lua_type":"Scope<any>"},{"name":"fusionState","desc":"The state object to observe","lua_type":"UsedAs<T>"},{"name":"callback","desc":"The callback to call when the fusionState is updated","lua_type":"(stateValue: T) -> ()"}],"returns":[{"desc":"A function that will disconnect the observer","lua_type":"() -> ()"}],"function_type":"static","source":{"line":672,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}},{"name":"copyState","desc":"Copies the state of a state object to a new state object. If the state object is updated, the new state object will be updated as well.\\n\\n\\n```lua\\nlocal s = RailUtil.Fusion.scoped()\\n\\nlocal a = s:Value(10)\\nlocal b, disconnect = s:copyState(a)\\n\\nprint( peek(b) ) -- 10\\na:set(20)\\nprint( peek(b) ) -- 20\\n```","params":[{"name":"scope","desc":"","lua_type":"Scope<any>"},{"name":"state","desc":"The state object to copy","lua_type":"UsedAs<T>"}],"returns":[{"desc":"The new state object copied from the original state object","lua_type":"State<T>"},{"desc":"A function to disconnect the syncronization of the two states","lua_type":"() -> ()"}],"function_type":"static","source":{"line":705,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}},{"name":"syncValues","desc":"Syncronizes a StateObject to a Value. The Value will be set to the StateObject\'s value any time it changes.\\nFunctions similarly to FusionUtil.copyState but requires you to give it the Value StateObject to update.\\n\\n\\n```lua\\nlocal s = RailUtil.Fusion.scoped()\\n\\nlocal a = s:Value(123)\\nlocal b = s:Value(0)\\nlocal disconnect = s:syncValues(a, b)\\n\\nprint( peek(b) ) -- 123\\na:set(456)\\nprint( peek(b) ) -- 456\\n\\ndisconnect()\\n```","params":[{"name":"scope","desc":"","lua_type":"Scope<any>"},{"name":"stateToWatch","desc":"The state to watch for changes","lua_type":"State<any>"},{"name":"valueToSet","desc":"The value to set when the state changes","lua_type":"Value<any>"}],"returns":[{"desc":"A function that will disconnect the observer","lua_type":"() -> ()"}],"function_type":"static","source":{"line":739,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}},{"name":"clock","desc":"Creates a State that is updated on RenderStepped.\\nThe value of the State will contain a number representing the amount of time\\nthat the clock has spent running.\\n\\n\\n```lua\\nlocal s = RailUtil.Fusion.scoped()\\n\\nlocal clock = s:clock()\\n\\ns:New \\"Part\\" {\\n\\tPosition = s:Computed(function(use)\\n\\t\\tlocal t = use(clock)\\n\\t\\treturn Vector3.new(0, 5 + math.sin(t) * 5, 0)\\n\\tend)\\n}\\n```","params":[{"name":"scope","desc":"","lua_type":"Scope<any>"},{"name":"paused","desc":"A State that can be used to pause the clock","lua_type":"State<boolean>?"}],"returns":[{"desc":"","lua_type":"Value<number>\\r\\n"}],"function_type":"static","source":{"line":769,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}},{"name":"arrayInsert","desc":"Inserts a value into a container state object.\\nFollows the structure of `table.insert` so giving an extra arg for the index will insert the value at that index.\\n\\n\\n```lua\\nlocal myArr = s:Value({\\"A\\", \\"B\\", \\"C\\"})\\n\\nFusionUtil.arrayInsert(myArr, 2, \\"X\\")\\nprint( peek(myArr) ) -- {\\"A\\", \\"X\\", \\"B\\", \\"C\\"}\\n\\nFusionUtil.arrayInsert(myArr, \\"Z\\")\\nprint( peek(myArr) ) -- {\\"A\\", \\"X\\", \\"B\\", \\"C\\", \\"Z\\"}\\n```","params":[{"name":"valueState","desc":"The container state object","lua_type":"Value<{T}>"},{"name":"...","desc":"","lua_type":"(number, T) | T"}],"returns":[],"function_type":"static","source":{"line":852,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}},{"name":"arrayRemove","desc":"Removes a value from a container state object.\\n\\n\\n\\n```lua\\nlocal myArr = s:Value({\\"A\\", \\"B\\", \\"C\\"})\\n\\nlocal removedValue = FusionUtil.arrayRemove(myArr, 2)\\nprint( peek(myArr) ) -- {\\"A\\", \\"C\\"}\\nprint( removedValue ) -- \\"B\\"\\n```","params":[{"name":"valueState","desc":"The container state object","lua_type":"Value<{T}>"},{"name":"index","desc":"The index of the value to remove","lua_type":"number?"},{"name":"swapRemove","desc":"Whether to swap the value with the last value before removing it. This is faster than a regular remove but does not maintain the order of the array.","lua_type":"boolean?"}],"returns":[{"desc":"The removed value","lua_type":"T"}],"function_type":"static","source":{"line":881,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}},{"name":"arraySwapRemove","desc":"Swaps two values in a container state object.\\n\\n\\n\\n```lua\\nlocal myArr = s:Value({\\"A\\", \\"B\\", \\"C\\"})\\n\\nlocal removedValue = FusionUtil.arraySwapRemove(myArr, 1)\\nprint( peek(myArr) ) -- {\\"C\\", \\"B\\"}\\nprint( removedValue ) -- \\"A\\"\\n```","params":[{"name":"valueState","desc":"The container state object","lua_type":"Value<{T}>"},{"name":"index","desc":"the index of the value to swap out","lua_type":"number"}],"returns":[{"desc":"The value that was swapped out","lua_type":"T"}],"function_type":"static","source":{"line":914,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}},{"name":"arrayRemoveFirstValue","desc":"Removes the first instance of a value from a container state object.\\n\\n\\n\\n```lua\\nlocal myArr = s:Value({\\"A\\", \\"B\\", \\"C\\"})\\n\\nlocal indexOfRemovedValue = FusionUtil.arrayRemoveFirstValue(myArr, \\"A\\")\\nprint( peek(myArr) ) -- {\\"B\\", \\"C\\"}\\nprint( indexOfRemovedValue ) -- 1\\n```","params":[{"name":"valueState","desc":"The container state object","lua_type":"Value<{T}>"},{"name":"value","desc":"The value to remove","lua_type":"T"},{"name":"swapRemove","desc":"Whether to swap the value with the last value before removing it. This is faster than a regular remove but does not maintain the order of the array.","lua_type":"boolean?"}],"returns":[{"desc":"The index of the removed value if found","lua_type":"number?"}],"function_type":"static","source":{"line":946,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}},{"name":"arraySwapRemoveFirstValue","desc":"Removes the first instance of a value from a container state object via swap replacement.\\nFaster than normal removal but does not maintain order.\\n\\n\\n\\n```lua\\nlocal myArr = s:Value({\\"A\\", \\"B\\", \\"C\\"})\\n\\nFusionUtil.arraySwapRemoveFirstValue(myArr, \\"A\\")\\nprint( peek(myArr) ) -- {\\"C\\", \\"B\\"}\\n```","params":[{"name":"valueState","desc":"The container state object","lua_type":"Value<{T}>"},{"name":"value","desc":"The value to remove","lua_type":"T"}],"returns":[{"desc":"The index of the removed value if found","lua_type":"number?"}],"function_type":"static","source":{"line":973,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}},{"name":"arraySet","desc":"Sets a value in a container state object.\\n\\n\\n```lua\\nlocal myArr = s:Value({\\"A\\", \\"B\\", \\"C\\"})\\n\\nFusionUtil.arraySet(myArr, 2, \\"X\\")\\nprint( peek(myArr) ) -- {\\"A\\", \\"X\\", \\"C\\"}\\n```","params":[{"name":"valueState","desc":"The container state object","lua_type":"Value<{T}>"},{"name":"index","desc":"The index of the value to change","lua_type":"number"},{"name":"newValue","desc":"The new value to change index to","lua_type":"T"},{"name":"updateInsteadOfReplace","desc":"Whether to update the value at the index if it is a ValueState instead of overwriting it","lua_type":"boolean?"}],"returns":[{"desc":"","lua_type":"T\\r\\n"}],"function_type":"static","source":{"line":994,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}},{"name":"arraySetFirstValue","desc":"Sets the first instance of a value in a container state object.\\n\\n\\n```lua\\nlocal myArr = s:Value({\\"A\\", \\"B\\", \\"C\\"})\\n\\nFusionUtil.arraySetFirstValue(myArr, \\"B\\", \\"X\\")\\nprint( peek(myArr) ) -- {\\"A\\", \\"X\\", \\"C\\"}\\n```","params":[{"name":"valueState","desc":"The container state object","lua_type":"Value<{T}>"},{"name":"valueToFind","desc":"The value to find","lua_type":"T"},{"name":"valueToReplaceWith","desc":"The value to replace the found value with","lua_type":"T"},{"name":"updateInsteadOfReplace","desc":"Whether to update the value at the index if it is a ValueState instead of overwriting it","lua_type":"boolean?"}],"returns":[{"desc":"","lua_type":"T?\\r\\n"}],"function_type":"static","source":{"line":1030,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}}],"properties":[{"name":"scope","desc":"The global scope for FusionUtil.","lua_type":"Scope<FusionUtil>","source":{"line":89,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}},{"name":"scopeless","desc":"A table of convenience functions for creating Fusion objects.\\nThese functions do not require the use of a scope, they by default use the FusionUtil scope.\\nThese are meant to be used in places where you want to create persistent Fusion objects without needing to pass a scope.\\n\\n```lua\\nlocal Value = FusionUtil.scopeless.Value\\n\\nlocal a = Value(10)\\n```","lua_type":"table","source":{"line":106,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}}],"types":[],"name":"[0.3.0] FusionUtil","desc":"A collection of utility functions for Fusion 0.3.0.\\n\\n:::warning Multithreading\\nDO NOT ACCESS THIS IN MULTIPLE VMs (Parallel Luau). Studio freaks out when\\nfusion is loaded in multiple VMs for some unknown reason.\\n:::\\n\\n:::tip\\nIf you see a variable `s` being used in the examples, you can assume it is a Fusion Scope equivalent to the following:\\n```lua\\nlocal s = RailUtil.Fusion:scoped()\\n```\\n:::","source":{"line":21,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}}')}}]);